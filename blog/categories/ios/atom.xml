<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Roylo's Note]]></title>
  <link href="http://roylo.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://roylo.github.io/"/>
  <updated>2014-10-15T10:18:28+08:00</updated>
  <id>http://roylo.github.io/</id>
  <author>
    <name><![CDATA[roylo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[整合 pod static library 進已有的 project]]></title>
    <link href="http://roylo.github.io/blog/2014/10/15/zheng-he-pod-static-library-jin-yi-you-de-project/"/>
    <updated>2014-10-15T09:10:46+08:00</updated>
    <id>http://roylo.github.io/blog/2014/10/15/zheng-he-pod-static-library-jin-yi-you-de-project</id>
    <content type="html"><![CDATA[<p>最近因為工作需要利用 pod 寫了一個 static library, 這個 static lib 本身有使用其他的 pod library<br/>
當我要把新的這個 static lib code 在跟現有的 project 整合的時候遇到不少問題<br/>
所以特別記錄一下</p>

<ul>
<li>首先先寫好 static library Podfile, 並執行 <code>pod install</code> or <code>pod update</code>
```

<h1>Uncomment this line to define a global platform for your project</h1>

<h1>platform :ios, “7.0”</h1></li>
</ul>


<p>target “CrystalSDK” do
pod ‘AFDownloadRequestOperation’
pod ‘SSZipArchive’
end
```</p>

<ul>
<li>寫好 static library 的 xxxx.podspec, dependency 記得要寫 3rd party 的 pod lib</li>
<li>在要整合 project 的資料夾寫 Podfile, 要注意的是 target 是針對 project 裡要 build 的 target 才會整合 pod
```

<h1>Uncomment this line to define a global platform for your project</h1>

<h1>platform :ios, “6.0”</h1></li>
</ul>


<p>target “AppleDailyNextGen” do
pod ‘CrystalSDK’, :path => ‘../CrystalSDK/’
end
```</p>

<!-- more -->


<ul>
<li>在 project 資料夾下執行 <code>pod install</code>, 在這裡我遇到了第一個問題</li>
</ul>


<p><img class="center" src="/images/pod_integration/PodOverwriteSettingDefine.png"></p>

<ul>
<li>解決的方法就是如同上面寫的, 在 project 的 target 裡的 build setting 都加上 <code>$(inherited)</code></li>
</ul>


<p><img class="center" src="/images/pod_integration/BuildSetting.png"></p>

<ul>
<li>接下來我遇到了 link 不到 static library .a 檔的問題，我的 .a 檔叫做 <code>libPods-(target_name).a</code>，我猜這是因為現在我用的是 source code 整合，並非先 compile 出 .a 檔，所以才會找不到</li>
<li>解決的方法是在 target scheme 的 build 裡把 pod 也加進去，並且在 project 之前先 build</li>
</ul>


<p><img class="center" src="/images/pod_integration/TargetScheme.png">
<img class="center" src="/images/pod_integration/AddPodToBuild.png"></p>

<ul>
<li>接著就是要確認 target 的 build phase 裡有加上你的 libPods-(target_name).a 檔</li>
</ul>


<p><img class="center" src="/images/pod_integration/BuildPhaseLibrary.png"></p>

<ul>
<li>這時候再 compile 理論上就可以了! 但是有個例外，就是你的 project 不可以有使用跟 static lib 裡面一樣 3rd party library。</li>
<li>以我的例子來說，我用到了 AFNetworking 這個 Lib ，結果就是 compile 時會說有 duplicate symbolic link errors ，我上網找了很久才找到下面的解法，可以參考這個 blog</li>
</ul>


<p><a href="http://blog.sigmapoint.pl/avoiding-dependency-collisions-in-ios-static-library-managed-by-cocoapods">Avoiding dependency collisions in iOS static library managed by CocoaPods</a></p>

<p>簡單用法：<br/>
&ndash; 用這個 <a href="https://gist.github.com/roylo/ba655589b7759100c14d">avoid_collision.sh</a> 放到 pod 的 build phase 裡的 run script，跑一次之後可以產生一個 <code>NamespacedDependencies.h</code> 檔裡面都是 macro</p>

<p><img class="center" src="/images/pod_integration/run_script_phase_added_to_pods.png"></p>

<ul>
<li>在 static lib 裡的 pch 檔 import 這個 <code>NamespacedDependencies.h</code></li>
</ul>


<p><img class="center" src="/images/pod_integration/ImportNamespaceHeaderToStaticLib.png"></p>

<ul>
<li>在每一個 3rd party 的 pch 檔也 import 這個 <code>NamespacedDependencies.h</code></li>
</ul>


<p><img class="center" src="/images/pod_integration/ImportNamespaceHeaderTo3rdPartyLib.png"></p>

<ul>
<li>加完之後可以看一下用到這些 class 的字顏色有沒有變成咖啡色 (用到 macro), 或是 command+click 連過去看看</li>
<li>最後再 compile 理論上就可以解決 duplicate symbolic link 的問題了</li>
</ul>


<p>光是弄這些環境我就搞了快一天，中間也試過先包成 .a 檔直接放進 project。<br/>
但是這樣實在是 debug 不方便<br/>
可能有些步驟還少記錄，因為當天什麼方法幾乎都嘗試了 orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[preserve folder reference in pod]]></title>
    <link href="http://roylo.github.io/blog/2014/09/29/preserve-folder-reference-in-pod/"/>
    <updated>2014-09-29T23:57:54+08:00</updated>
    <id>http://roylo.github.io/blog/2014/09/29/preserve-folder-reference-in-pod</id>
    <content type="html"><![CDATA[<p>最近開發 ios project 有使用到 cocoapod 來整合第三方 source 和 static library<br/>
但是卻一直苦惱於整合進來的 pod static library folder reference 會跑掉<br/>
今天找到解法可以使用 cocoapod 的 subspec 來定義<br/>
用法如下：</p>

<ul>
<li><p>在 workspace.podspec 檔案裡面設定 folder structure
```
s.source_files  = &ldquo;CrystalSDK&rdquo;, &ldquo;CrystalSDK/*.{h,m}&rdquo;
s.exclude_files = &ldquo;&rdquo;</p>

<p>s.public_header_files = &ldquo;CrystalSDK/<em>*/</em>.h&rdquo;</p>

<p>s.subspec &ldquo;Http&rdquo; do |http|
  http.source_files = &ldquo;CrystalSDK/Http/*.{h,m}&rdquo;
end</p>

<p>s.subspec &ldquo;Model&rdquo; do |model|
  model.source_files = &ldquo;CrystalSDK/model/*.{h,m}&rdquo;
end</p>

<p>s.subspec &ldquo;Util&rdquo; do |util|
  util.source_files = &ldquo;CrystalSDK/Util/*.{h,m}&rdquo;
end</p>

<p>s.subspec &ldquo;UI&rdquo; do |ui|
  ui.source_files = &ldquo;CrystalSDK/UI/*.{h,m}&rdquo;
end</p>

<p>s.subspec &ldquo;Manager&rdquo; do |manager|
  manager.source_files = &ldquo;CrystalSDK/Manager/*.{h,m}&rdquo;
end
```</p></li>
</ul>


<p>這樣在使用到這個 pod project 的時候，xcode 就會依照 subspec 去建立 group<br/>
詳細的 cocoapod subspec 用法可以參照官網 <a href="http://guides.cocoapods.org/syntax/podspec.html#subspec">cocoapod subspec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD note - introduction]]></title>
    <link href="http://roylo.github.io/blog/2014/09/29/gcd-note/"/>
    <updated>2014-09-29T09:33:56+08:00</updated>
    <id>http://roylo.github.io/blog/2014/09/29/gcd-note</id>
    <content type="html"><![CDATA[<p>因為工作上的需要，需要多了解一下 ios 下的 GCD (Grand Central Dispatcher)，所以寫一篇 note 來記錄。</p>

<h2>Asynchronous</h2>

<ul>
<li>基本上 GCD 可以用來做非同步的應用，避免一些耗時長的工作 block 使用者的操作</li>
<li>Apple 在 Mac OS 10.7 和 IOS 4.0 之後提供 GCD 的機制，將多工處理的 thread 統一交給 OS 處理，提供更好的效能。</li>
<li>根據官方文件的說法，GCD 並不限定只使用在 system-level 的程式，但是當我們考慮在更上層的程式使用之前，應該優先考量 Cocoa 內提供的類似功能 (NSOperation and block objects)，可以參考 <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">Concurrency Programming Guide</a></li>
</ul>


<h2>Dispatch Queues</h2>

<p>GCD 提供並管理 FIFO queues 讓我們的 application 可以提交 block objects，進入 queue 裡的 block object 會由系統管理的 thread pool 找出 thread 執行。因此無法保證是哪個 thread 執行哪個 task。</p>

<p>GCD 提供三種 queue</p>

<ol>
<li>Main: task 會在 application main thread 依序執行</li>
<li>Concurrent: task 會以 FIFO 的順序從 queue 取出，但是同時執行，可能以任何順序結束執行。</li>
<li>Serial: 以 FIFO 的順序一次只執行一個 task</li>
</ol>


<h3>main queue</h3>

<p>Main queue 是自動在 application 執行的時候由系統建立，可以以下列三種方式提交 block objects 給 main queue。</p>

<ol>
<li>Calling <code>dispatch_main</code></li>
<li>Calling <code>UIApplicationMain (IOS) or NSApplicationMain (OS X)</code></li>
<li>Using a <code>CFRunLoopRef</code> on the main thread</li>
</ol>


<h3>concurrent queue</h3>

<p>GCD 會自動 create 四條 concurrent dispatch queues (ios 5 或是 OSX 10.7 之前是三條)，這是全域的 queue 可以直接被 application 使用。差別只有在 queue 的 priority level。
透過 <code>dispatch_get_global_queue</code> 來使用。OSX 10.7 和 iOS 4.3 之後可以自行建立額外的 concurrent queues。</p>

<h3>serial queue</h3>

<p>Serial queue 可以確保執行的順序，建立不同的 queue 去處理不同的事情。application 必須自行建立與管理 serial queues，可以開任意條，但是不要用它來取代 concurrent queue 同時執行多個 tasks。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[frame vs. bounds in IOS programming]]></title>
    <link href="http://roylo.github.io/blog/2014/09/19/frame-vs-bounds-in-ios-programming/"/>
    <updated>2014-09-19T10:07:06+08:00</updated>
    <id>http://roylo.github.io/blog/2014/09/19/frame-vs-bounds-in-ios-programming</id>
    <content type="html"><![CDATA[<p>在學習 ios programming 的過程中, 對 frames &amp; bounds 有點疑問
查了一下</p>

<ul>
<li>frames 是指對 superview 坐標系統的位置</li>
<li>bounds 是指對 local 坐標系統的位置</li>
</ul>


<p>可以看下面這張圖：
<img class="center" src="/images/Frame_bounds.png"></p>

<ul>
<li>default bounds 的原點都是在 (0,0)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[initWithNibName with Storyboard]]></title>
    <link href="http://roylo.github.io/blog/2014/09/18/initwithnibname-with-storyboard/"/>
    <updated>2014-09-18T15:57:20+08:00</updated>
    <id>http://roylo.github.io/blog/2014/09/18/initwithnibname-with-storyboard</id>
    <content type="html"><![CDATA[<p>在過去 ios 的開發還是使用 xib 來做 UI 的時候</p>

<p>常常會在 <code>initWithNibName</code> 去做一些 initialization, 但是到 storyboard 的時候
就不會去呼叫這個 function , 那個該寫什麼來取代呢?</p>

<p>舊的寫法(當使用 xib)：
``` objc
&ndash; (id) initWithNibName: (NSString <em>)nibNameOrNil bundle:(NSBundle </em>)nibBundleOrNil
{</p>

<pre><code>self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
if (self) {
    ....
}

return self;
</code></pre>

<p>}
<code>
新的寫法(當使用 storyboard)：
</code> objc
&ndash; (id)initWithCoder:(NSCoder *)aDecoder
{</p>

<pre><code>self = [super initWithCoder:aDecoder];
if (self) {
    ....
}

return self;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
